{"version":3,"sources":["components/RssFeedItemView.tsx","components/LoadingSkeleton.tsx","FeedList.tsx","hooks/useRssFeeds.tsx","components/NavigationTopBar.tsx","components/AddFeedsView.tsx","components/ArticleView.tsx","App.tsx","hooks/useLocalStorage.tsx","hooks/useMessageEventListener.tsx","reportWebVitals.ts","index.tsx"],"names":["RssFeedItemView","_ref","feedTitle","rssFeedItem","onItemClick","handleOnClick","useCallback","formattedDate","useMemo","format","Date","isoDate","_jsxs","Stack","onClick","padding","sx","backgroundColor","borderWidth","borderStyle","borderColor","borderRadius","cursor","textAlign","children","_jsx","Typography","fontWeight","variant","title","overflow","textOverflow","display","WebkitLineClamp","WebkitBoxOrient","contentSnippet","alignSelf","LoadingSkeleton","memo","spacing","Skeleton","height","displayName","FeedList","onRssFeedItemClick","feedUrls","feeds","loading","error","urls","setFeeds","useState","setLoading","setError","useEffect","async","parser","Parser","promises","map","parseURL","url","parseError","console","concat","fetchedFeeds","Promise","all","filter","Boolean","fetchFeeds","useRssFeeds","length","feed","index","Fragment","items","item","NavigationTopBar","step","onAdd","onGoBack","flexDirection","alignItems","justifyContent","IconButton","width","AddIcon","KeyboardArrowLeftIcon","AddFeedsView","rssFeedUrl","onChangeRssFeedUrl","onDelete","onAddRssFeedUrl","TextField","fullWidth","value","size","type","onKeyDown","e","key","onChange","target","feedUrl","borderBottomStyle","borderBottomColor","wordBreak","DeleteForeverIcon","color","ArticleView","_ref2","author","creator","replace","dangerouslySetInnerHTML","__html","content","defaultFeedUrlsValue","App","setStep","selectedFeedItem","setSelectedFeedItem","setRssFeedUrl","objectId","setObjectId","updateValue","getValue","initialValue","setValue","newValue","localStorage","setItem","JSON","stringify","storedValue","getItem","initial","parse","useLocalStorage","handleMessage","messageEvent","data","payload","eventListener","event","window","addEventListener","removeEventListener","handleOnAddNewFeed","handleOnGoBack","handleOnRssFeedItemClick","handleOnAddFeedUrl","trim","newFeedUrls","push","handleOnDeleteFeed","splice","className","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.a0f7ee83.chunk.js","sourcesContent":["import { Stack, Typography } from \"@mui/material\";\nimport { RssFeedItem } from \"../hooks/useRssFeeds\";\nimport { useCallback, useMemo } from \"react\";\nimport { format } from \"date-fns\";\n\ntype RssFeedItemViewProps = {\n  rssFeedItem: RssFeedItem;\n  feedTitle?: string;\n  onItemClick?: (rssFeedItem: RssFeedItem) => void;\n};\nexport const RssFeedItemView = ({\n  feedTitle,\n  rssFeedItem,\n  onItemClick,\n}: RssFeedItemViewProps) => {\n  const handleOnClick = useCallback(() => {\n    onItemClick?.(rssFeedItem);\n  }, [onItemClick, rssFeedItem]);\n\n  const formattedDate = useMemo(() => {\n    return format(new Date(rssFeedItem.isoDate), \"PPpp\");\n  }, [rssFeedItem.isoDate]);\n  return (\n    <Stack\n      onClick={handleOnClick}\n      padding={1}\n      sx={{\n        backgroundColor: \"#E6E5E5\",\n        borderWidth: \"thin\",\n        borderStyle: \"solid\",\n        borderColor: \"#B8B8B8\",\n        borderRadius: \"10px\",\n        cursor: \"pointer\",\n        textAlign: \"left\",\n      }}\n    >\n      <Typography fontWeight={\"bold\"} variant=\"body1\">\n        {rssFeedItem.title}\n      </Typography>\n      {/* <Typography variant=\"caption\">{feedTitle}</Typography> */}\n      <Typography\n        variant=\"caption\"\n        sx={{\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          display: \"-webkit-box\",\n          WebkitLineClamp: 2,\n          WebkitBoxOrient: \"vertical\",\n        }}\n      >\n        {rssFeedItem.contentSnippet}\n      </Typography>\n      <Typography alignSelf={\"end\"} variant=\"caption\">\n        {formattedDate}\n      </Typography>\n    </Stack>\n  );\n};\n","import { Skeleton, Stack } from \"@mui/material\";\nimport { memo } from \"react\";\n\nexport const LoadingSkeleton = memo(() => {\n  return (\n    <Stack spacing={1}>\n      <Skeleton variant=\"rectangular\" height={60} />\n      <Skeleton variant=\"rectangular\" height={60} />\n      <Skeleton variant=\"rectangular\" height={60} />\n      <Skeleton variant=\"rectangular\" height={60} />\n      <Skeleton variant=\"rectangular\" height={60} />\n      <Skeleton variant=\"rectangular\" height={60} />\n      <Skeleton variant=\"rectangular\" height={60} />\n    </Stack>\n  );\n});\n\nLoadingSkeleton.displayName = \"LoadingSkeleton\";\n","import { Fragment } from \"react\";\nimport { RssFeedItem, useRssFeeds } from \"./hooks/useRssFeeds\";\nimport { RssFeedItemView } from \"./components/RssFeedItemView\";\nimport { Stack, Typography } from \"@mui/material\";\nimport { LoadingSkeleton } from \"./components/LoadingSkeleton\";\ntype FeedListProps = {\n  onRssFeedItemClick: (rssFeedItem: RssFeedItem) => void;\n  feedUrls: string[];\n};\nexport const FeedList = ({ onRssFeedItemClick, feedUrls }: FeedListProps) => {\n  const { feeds, loading, error } = useRssFeeds(feedUrls);\n\n  if (loading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (error) {\n    return (\n      <Typography fontWeight={\"bold\"} variant=\"h5\">\n        {`Error: ${error}`}\n      </Typography>\n    );\n  }\n\n  return (\n    <Stack>\n      {feeds.length === 0 && (\n        <Typography variant=\"h6\">No results found.</Typography>\n      )}\n      {feeds.map((feed, index) => (\n        <Fragment key={index}>\n          {feed.items.length === 0 && (\n            <Typography variant=\"h6\">No results found.</Typography>\n          )}\n          {feed.items.map((item) => {\n            return (\n              <RssFeedItemView\n                key={item.isoDate}\n                feedTitle={feed.title}\n                rssFeedItem={item}\n                onItemClick={onRssFeedItemClick}\n              />\n            );\n          })}\n        </Fragment>\n      ))}\n    </Stack>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport Parser from \"rss-parser\";\n\nconst CORS_PROXY = \"https://corsanywhere-1990.onrender.com/\";\n\nexport type RssFeedItem = {\n  author: string;\n  creator: string;\n  content: string;\n  contentSnippet: string;\n  id?: string;\n  pubDate: string;\n  link: string;\n  title: string;\n  isoDate: string;\n  categories?: string | string[];\n};\n\nexport type RssFeed = {\n  title: string;\n  link: string;\n  description?: string;\n  items: RssFeedItem[];\n};\n\nexport const useRssFeeds = (urls: string[]) => {\n  const [feeds, setFeeds] = useState<RssFeed[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchFeeds = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const parser = new Parser();\n        const promises = urls.map(async (url) => {\n          try {\n            const feed = await parser.parseURL(CORS_PROXY + url);\n            return feed;\n          } catch (parseError) {\n            console.error(`Error parsing feed from ${url}:`, parseError);\n            return null;\n          }\n        });\n\n        const fetchedFeeds = (await Promise.all(promises)).filter(Boolean);\n        setFeeds(fetchedFeeds as []);\n        setLoading(false);\n        setError(null);\n      } catch (error) {\n        setFeeds([]);\n        setLoading(false);\n        setError(\"Error fetching RSS feeds\");\n      }\n    };\n\n    fetchFeeds();\n  }, [urls]);\n\n  return { feeds, loading, error };\n};\n","import { IconButton, Stack, Typography } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport KeyboardArrowLeftIcon from \"@mui/icons-material/KeyboardArrowLeft\";\n\ntype NavigationTopBarProps = {\n  onAdd?: () => void;\n  onGoBack?: () => void;\n  step: \"listFeed\" | \"addFeed\" | \"viewItem\";\n};\nexport const NavigationTopBar = ({\n  step,\n  onAdd,\n  onGoBack,\n}: NavigationTopBarProps) => {\n  return (\n    <Stack\n      flexDirection={\"row\"}\n      alignItems={\"center\"}\n      justifyContent={\"space-between\"}\n    >\n      {step === \"listFeed\" && (\n        <Typography variant=\"body2\">{\"Feeder\"}</Typography>\n      )}\n      {step === \"addFeed\" && (\n        <Typography variant=\"body2\">{\"Add Feed\"}</Typography>\n      )}\n      {step === \"listFeed\" && (\n        <IconButton\n          sx={{\n            width: \"30px\",\n            height: \"30px\",\n            borderRadius: 0,\n            backgroundColor: \"#E6E5E5\",\n          }}\n          onClick={onAdd}\n        >\n          <AddIcon />\n        </IconButton>\n      )}\n\n      {step !== \"listFeed\" && (\n        <IconButton\n          sx={{\n            width: \"30px\",\n            height: \"30px\",\n            borderRadius: 0,\n            backgroundColor: \"#E6E5E5\",\n          }}\n          onClick={onGoBack}\n        >\n          <KeyboardArrowLeftIcon />\n        </IconButton>\n      )}\n    </Stack>\n  );\n};\n","import { IconButton, Stack, TextField, Typography } from \"@mui/material\";\nimport DeleteForeverIcon from \"@mui/icons-material/DeleteForever\";\nexport type AddFeedsViewProps = {\n  feedUrls: string[];\n  rssFeedUrl: string;\n  onChangeRssFeedUrl: (feedUrl: string) => void;\n  onAddRssFeedUrl: () => void;\n  onDelete?: (index: number) => void;\n};\nexport const AddFeedsView = ({\n  rssFeedUrl,\n  onChangeRssFeedUrl,\n  feedUrls,\n  onDelete,\n  onAddRssFeedUrl,\n}: AddFeedsViewProps) => {\n  return (\n    <Stack>\n      <Stack\n        flexDirection={\"row\"}\n        justifyContent={\"space-between\"}\n        padding={2}\n        sx={{\n          backgroundColor: \"#E6E5E5\",\n          borderWidth: \"thin\",\n          borderStyle: \"solid\",\n          borderColor: \"#B8B8B8\",\n          borderRadius: \"10px\",\n        }}\n      >\n        <Typography variant=\"body2\">{\"Feed URL\"}</Typography>\n        <TextField\n          fullWidth\n          value={rssFeedUrl}\n          variant=\"outlined\"\n          size=\"small\"\n          type=\"url\"\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              onAddRssFeedUrl();\n            }\n          }}\n          onChange={(e) => onChangeRssFeedUrl(e.target.value)}\n        />\n      </Stack>\n      <Stack padding={3} sx={{\n          backgroundColor: \"#E6E5E5\",\n          borderWidth: \"thin\",\n          borderStyle: \"solid\",\n          borderColor: \"#B8B8B8\",\n          borderRadius: \"10px\",\n        }}>\n        <Stack\n          sx={{\n            backgroundColor: \"white\",\n            borderWidth: \"thin\",\n            borderStyle: \"solid\",\n            borderColor: \"#B8B8B8\",\n            borderRadius: \"10px\",\n          }}\n          padding={1}\n        >\n          {feedUrls.map((feedUrl, index) => {\n            return (\n              <Stack\n                alignItems={\"center\"}\n                key={index}\n                flexDirection={\"row\"}\n                justifyContent={\"space-between\"}\n                sx={{\n                  borderWidth: \"thin\",\n                  borderBottomStyle: \"solid\",\n                  borderBottomColor: \"#B8B8B8\",\n\n                }}\n              >\n                <Typography variant=\"body2\" sx={{wordBreak: 'break-all'}}>{feedUrl}</Typography>\n                <IconButton onClick={() => onDelete?.(index)}>\n                  <DeleteForeverIcon color=\"error\"/>\n                </IconButton>\n              </Stack>\n            );\n          })}\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n};\n","import { Stack, Typography } from \"@mui/material\";\nimport { RssFeedItem } from \"../hooks/useRssFeeds\";\nimport { format } from \"date-fns\";\n\ntype ArticleViewProps = {\n  rssFeedItem: RssFeedItem;\n};\nexport const ArticleView = ({ rssFeedItem }: ArticleViewProps) => {\n  return (\n    <Stack\n      sx={{\n        backgroundColor: \"#E6E5E5\",\n        borderWidth: \"medium\",\n        borderStyle: \"solid\",\n        borderColor: \"#B8B8B8\",\n        borderRadius: \"10px\",\n        textAlign: \"left\",\n        padding: 2,\n      }}\n      spacing={3}\n    >\n      <Stack>\n        <Typography variant=\"body2\">\n          {format(new Date(rssFeedItem.isoDate), \"PPpp\")}\n        </Typography>\n        <Typography variant=\"h5\" fontWeight={\"bold\"}>\n          {rssFeedItem.title}\n        </Typography>\n        {(rssFeedItem.author || rssFeedItem.creator) && (\n          <Typography variant=\"body2\">{`By ${(\n            rssFeedItem.author || rssFeedItem.creator\n          )?.replace(\"/u/\", \"\")}`}</Typography>\n        )}\n      </Stack>\n\n      <Typography\n        variant=\"body2\"\n        sx={{ overflow: \"auto\" }}\n        dangerouslySetInnerHTML={{ __html: rssFeedItem.content }}\n      />\n    </Stack>\n  );\n};\n","import { Container, Stack } from \"@mui/material\";\nimport \"./App.css\";\nimport { FeedList } from \"./FeedList\";\nimport { NavigationTopBar } from \"./components/NavigationTopBar\";\nimport { useCallback, useState } from \"react\";\nimport { RssFeedItem } from \"./hooks/useRssFeeds\";\nimport { AddFeedsView } from \"./components/AddFeedsView\";\nimport { ArticleView } from \"./components/ArticleView\";\nimport { useMessageEventListener } from \"./hooks/useMessageEventListener\";\nimport { useLocalStorage } from \"./hooks/useLocalStorage\";\ntype OvicePayloadType = {\n  objectId: string;\n};\n\ntype OviceEvent = {\n  type: \"ovice_participant_subscribed\" | \"ovice_participant_joined\";\n  payload: OvicePayloadType;\n};\n\nconst defaultFeedUrlsValue: string[] = [];\nfunction App() {\n  const [step, setStep] = useState<\"listFeed\" | \"addFeed\" | \"viewItem\">(\n    \"listFeed\"\n  );\n\n  const [selectedFeedItem, setSelectedFeedItem] = useState<\n    RssFeedItem | undefined\n  >();\n  const [rssFeedUrl, setRssFeedUrl] = useState<string>(\"\");\n  const [objectId, setObjectId] = useState<string | undefined>();\n\n  const {\n    updateValue,\n    value: feedUrls,\n    getValue,\n  } = useLocalStorage<string[]>(defaultFeedUrlsValue);\n  useMessageEventListener(\n    useCallback(\n      (messageEvent: MessageEvent) => {\n        const data: OviceEvent = messageEvent.data;\n        if (\n          data.type === \"ovice_participant_joined\" ||\n          data.type === \"ovice_participant_subscribed\"\n        ) {\n          setObjectId(data.payload.objectId);\n          getValue(`rss-reader-${data.payload.objectId}`);\n        }\n      },\n      [getValue]\n    )\n  );\n\n  const handleOnAddNewFeed = useCallback(() => {\n    setStep(\"addFeed\");\n  }, []);\n\n  const handleOnGoBack = useCallback(() => {\n    setStep(\"listFeed\");\n  }, []);\n\n  const handleOnRssFeedItemClick = useCallback((rssFeedItem: RssFeedItem) => {\n    setSelectedFeedItem(rssFeedItem);\n    setStep(\"viewItem\");\n  }, []);\n\n  const handleOnAddFeedUrl = useCallback(() => {\n    if (!rssFeedUrl.trim()) {\n      return;\n    }\n    const newFeedUrls = [...feedUrls];\n    newFeedUrls.push(rssFeedUrl);\n    updateValue(`rss-reader-${objectId}`, newFeedUrls);\n    setRssFeedUrl(\"\");\n  }, [feedUrls, objectId, rssFeedUrl, updateValue]);\n\n  const handleOnDeleteFeed = useCallback(\n    (index: number) => {\n      const newFeedUrls = [...feedUrls];\n      newFeedUrls.splice(index, 1);\n      updateValue(`rss-reader-${objectId}`, newFeedUrls);\n    },\n    [feedUrls, objectId, updateValue]\n  );\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\" sx={{ backgroundColor: \"white\" }}>\n        <Stack spacing={1} padding={1}>\n          <NavigationTopBar\n            step={step}\n            onAdd={handleOnAddNewFeed}\n            onGoBack={handleOnGoBack}\n          />\n          {step === \"addFeed\" && (\n            <AddFeedsView\n              onAddRssFeedUrl={handleOnAddFeedUrl}\n              rssFeedUrl={rssFeedUrl}\n              onChangeRssFeedUrl={setRssFeedUrl}\n              feedUrls={feedUrls}\n              onDelete={handleOnDeleteFeed}\n            />\n          )}\n          {step === \"listFeed\" && (\n            <FeedList\n              feedUrls={feedUrls}\n              onRssFeedItemClick={handleOnRssFeedItemClick}\n            />\n          )}\n          {step === \"viewItem\" && selectedFeedItem && (\n            <ArticleView rssFeedItem={selectedFeedItem} />\n          )}\n        </Stack>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useState } from \"react\";\n\nexport const useLocalStorage = <T,>(initialValue: T) => {\n  const [value, setValue] = useState<T>(initialValue);\n\n  const updateValue = useCallback((key: string, newValue: T) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  }, []);\n\n  const getValue = useCallback(\n    (key: string) => {\n      const storedValue = localStorage.getItem(key);\n      const initial = storedValue ? JSON.parse(storedValue) : initialValue;\n      setValue(initial);\n    },\n    [initialValue]\n  );\n\n  return { value, updateValue, getValue };\n};\n","import { useEffect } from \"react\";\n\nexport const useMessageEventListener = (\n  handleMessage: (event: MessageEvent) => void\n) => {\n  useEffect(() => {\n    const eventListener = (event: MessageEvent) => {\n      handleMessage(event);\n    };\n\n    window.addEventListener(\"message\", eventListener);\n\n    return () => {\n      window.removeEventListener(\"message\", eventListener);\n    };\n  }, [handleMessage]);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}